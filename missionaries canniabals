from collections import deque

# Define the initial state and the goal state
initial_state = (3, 3, 1)  # (Missionaries on left, Cannibals on left, Boat position)
goal_state = (0, 0, 0)     # (Missionaries on right, Cannibals on right, Boat position)

def is_valid(state):
    m_left, c_left, _ = state
    m_right = 3 - m_left
    c_right = 3 - c_left
    # Check for validity of state (no side should have more cannibals than missionaries)
    return (m_left >= c_left or m_left == 0) and (m_right >= c_right or m_right == 0)

def bfs_solution():
    # Initialize the queue for BFS and the set for visited states
    queue = deque([(initial_state, [])])
    visited = set()

    while queue:
        current_state, path = queue.popleft()

        # Check if the goal state is reached
        if current_state == goal_state:
            return path + [current_state]

        # Mark the current state as visited
        visited.add(current_state)

        # Generate all possible valid moves
        m_left, c_left, boat = current_state
        moves = []

        if boat == 1:  # Boat is on the left side
            if m_left >= 2:
                moves.append((m_left - 2, c_left, 0))  # Move 2 missionaries
            if m_left >= 1:
                moves.append((m_left - 1, c_left, 0))  # Move 1 missionary
            if c_left >= 2:
                moves.append((m_left, c_left - 2, 0))  # Move 2 cannibals
            if c_left >= 1:
                moves.append((m_left, c_left - 1, 0))  # Move 1 cannibal
            if m_left >= 1 and c_left >= 1:
                moves.append((m_left - 1, c_left - 1, 0))  # Move 1 missionary and 1 cannibal

        else:  # Boat is on the right side
            m_right = 3 - m_left
            c_right = 3 - c_left
            if m_right >= 2:
                moves.append((m_left + 2, c_left, 1))  # Move 2 missionaries back
            if m_right >= 1:
                moves.append((m_left + 1, c_left, 1))  # Move 1 missionary back
            if c_right >= 2:
                moves.append((m_left, c_left + 2, 1))  # Move 2 cannibals back
            if c_right >= 1:
                moves.append((m_left, c_left + 1, 1))  # Move 1 cannibal back
            if m_right >= 1 and c_right >= 1:
                moves.append((m_left + 1, c_left + 1, 1))  # Move 1 missionary and 1 cannibal back

        # Enqueue the valid moves that haven't been visited
        for move in moves:
            if is_valid(move) and move not in visited:
                queue.append((move, path + [current_state]))

    return None  # If no solution is found

def print_solution(solution):
    if solution:
        for step in solution:
            print(f"Missionaries on left: {step[0]}, Cannibals on left: {step[1]}, Boat on {'left' if step[2] == 1 else 'right'}")
    else:
        print("No solution found.")

def main():
    print("Solving the Missionaries and Cannibals problem:")
    solution = bfs_solution()
    print_solution(solution)

if __name__ == "__main__":
    main()
