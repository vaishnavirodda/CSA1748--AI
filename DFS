dfs_recursive(graph, node, visited):
    # Mark the node as visited
    visited.add(node)
    print(node, end=" ")

    # Recursively visit all adjacent nodes that have not been visited
    for neighbor in graph[node]:
def        if neighbor not in visited:
            dfs_recursive(graph, neighbor, visited)

# Example usage
if __name__ == "__main__":
    # Example graph represented as an adjacency list
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }

    # Set to keep track of visited nodes
    visited = set()

    # Perform DFS starting from node 'A'
    print("DFS traversal starting from node A:")
    dfs_recursive(graph, 'A', visited)
