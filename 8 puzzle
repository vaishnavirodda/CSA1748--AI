import heapq

# Function to calculate Manhattan distance
def manhattan_distance(start, goal):
    distance = 0
    for i in range(1, 9):
        start_index = start.index(i)
        goal_index = goal.index(i)
        distance += abs(start_index // 3 - goal_index // 3) + abs(start_index % 3 - goal_index % 3)
    return distance

# Function to generate neighbors of a state
def generate_neighbors(state):
    neighbors = []
    zero_index = state.index(0)
    x, y = zero_index // 3, zero_index % 3

    # Possible moves (up, down, left, right)
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    for move in moves:
        new_x, new_y = x + move[0], y + move[1]
        
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_zero_index = new_x * 3 + new_y
            new_state = list(state)
            new_state[zero_index], new_state[new_zero_index] = new_state[new_zero_index], new_state[zero_index]
            neighbors.append(tuple(new_state))
    
    return neighbors

# A* algorithm
def a_star(start, goal):
    open_set = []
    heapq.heappush(open_set, (0 + manhattan_distance(start, goal), 0, start, []))
    closed_set = set()
    
    while open_set:
        _, cost, state, path = heapq.heappop(open_set)
        
        if state == goal:
            return path + [state]
        
        if state in closed_set:
            continue
        
        closed_set.add(state)
        
        for neighbor in generate_neighbors(state):
            if neighbor not in closed_set:
                heapq.heappush(open_set, (cost + 1 + m9anhattan_distance(neighbor, goal), cost + 1, neighbor, path + [state]))
    
    return None

# Example usage
start_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)  # The initial state
goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)   # The goal state (solved puzzle)

solution = a_star(start_state, goal_state)

if solution:
    print("Solution found in", len(solution) - 1, "moves!")
    for step in solution:
        print(step[:3])
        print(step[3:6])
        print(step[6:])
        print()
else:
    print("No solution found.")
