from collections import deque

def bfs(graph, start_node):
    # Initialize a queue for BFS and a set for visited nodes
    queue = deque([start_node])
    visited = set([start_node])

    while queue:
        # Dequeue a node from the queue
        current_node = queue.popleft()
        print(current_node, end=" ")

        # Get all adjacent nodes of the dequeued node
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                # If a neighbor hasn't been visited, mark it as visited and enqueue it
                visited.add(neighbor)
                queue.append(neighbor)

# Example usage
if __name__ == "__main__":
    # Example graph represented as an adjacency list
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }

    # Perform BFS starting from node 'A'
    print("BFS traversal starting from node A:")
    bfs(graph, 'A')
